C51 COMPILER V9.59.0.0   MAIN                                                              06/27/2024 13:24:13 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN ..\..\hex\MAIN.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MAIN.C LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2) OBJECT(
                    -..\..\hex\MAIN.obj)

line level    source

   1          #include "lpcreg.h"
   2          #include "main.h"
   3          #include "mfrc522.h"
   4          #include "12864.h"
   5          #include <nokia5110.h>
   6          #include <stdio.h>
   7          #include <string.h>
   8          
   9          #define uchar unsigned char // 定义无符号字符类型
  10          #define MAX_LEN 16          // 数据最大长度
  11          #define FIRST_ROW 0
  12          #define SECOND_ROW 2
  13          #define THIRD_ROW 4
  14          
  15          uchar Char;                   // 定义字符变量Char
  16          uchar flag;                   // 定义标志位变量flag
  17          uchar received_data[MAX_LEN]; // 存储接收到的数据
  18          uchar data_index = 0;         // 数据索引
  19          // 前五位cqust   中间10位学生卡号
  20          uchar stu_id[16] = {0x63, 0x71, 0x75, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
             -00, 0x23}; // 存储学号格式
  21          
  22          // 第1位d 接10位学号 接4位地址
  23          uchar response_array[16] = {0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
             -0x00, 0x00, 0x23}; // 打卡响应数据帧
  24          
  25          // 前两位 ok  中间十位学生卡号
  26          uchar write_ok[16] = {0x6F, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
             -0x00, 0x23}; // 成功响应数组
  27          
  28          // 前六位 cardid 中间8位 标签卡号
  29          uchar card_id[16] = {0x63, 0x61, 0x72, 0x64, 0x69, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
             -x00, 0x23}; // 卡片id响应数组
  30          
  31          // 打卡响应数组
  32          
  33          unsigned char g_ucTempbuf[16];
  34          unsigned char code DefaultKey[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
  35          
  36          uchar i;
  37          
  38          // 是否读到卡标志 0未读 1读卡
  39          uchar is_card_read = 0;
  40          // 运行模式标志位 0读卡 1写卡
  41          uchar run_mode = 0;
  42          // 是否接收到数据
  43          uchar is_read_data = 0;
  44          
  45          void delay1(unsigned int z)
  46          {
  47   1          unsigned int x, y;
  48   1          for (x = z; x > 0; x--)
  49   1              for (y = 110; y > 0; y--)
  50   1                  ;
C51 COMPILER V9.59.0.0   MAIN                                                              06/27/2024 13:24:13 PAGE 2   

  51   1      }
  52          
  53          // UART发送一个字节函数
  54          void UART_sendbyte(uchar Byte)
  55          {
  56   1          SBUF = Byte;
  57   1          while (TI == 0)
  58   1              ;
  59   1          TI = 0;
  60   1      }
  61          
  62          // 转asc
  63          uchar nibble_to_ascii(uchar nibble)
  64          {
  65   1          if (nibble < 10)
  66   1          {
  67   2              return '0' + nibble;
  68   2          }
  69   1          else
  70   1          {
  71   2              return 'A' + (nibble - 10);
  72   2          }
  73   1      }
  74          
  75          void clear_row(uchar row)
  76          {
  77   1          for (i = 0; i < 15; i++)
  78   1          {
  79   2              LCD_write_shu(i, row, 37);
  80   2          }
  81   1      }
  82          
  83          void display_title(uchar row)
  84          {
  85   1          // cqust考勤系统
  86   1          LCD_write_shu(0, row, 12);
  87   1          LCD_write_shu(1, row, 26);
  88   1          LCD_write_shu(2, row, 30);
  89   1          LCD_write_shu(3, row, 28);
  90   1          LCD_write_shu(4, row, 29);
  91   1      
  92   1          LCD_write_shu(5, row, 37);
  93   1      
  94   1          LCD_write_hanzi(6, row, 0);
  95   1          LCD_write_hanzi(8, row, 1);
  96   1          LCD_write_hanzi(10, row, 2);
  97   1          LCD_write_hanzi(12, row, 3);
  98   1      }
  99          
 100          void display_sno(uchar row)
 101          {
 102   1          // 学号
 103   1          LCD_write_hanzi(0, row, 8);
 104   1          LCD_write_hanzi(2, row, 9);
 105   1          for (i = 0; i < 10; i++)
 106   1          {
 107   2              LCD_write_shu(i+4, row, g_ucTempbuf[5 + i] - '0');
 108   2          }
 109   1      }
 110          
 111          
 112          void display_bang_ding_chen_gong(uchar row)
C51 COMPILER V9.59.0.0   MAIN                                                              06/27/2024 13:24:13 PAGE 3   

 113          {
 114   1          // 绑定成功
 115   1          LCD_write_shu(1, row, 37);
 116   1          LCD_write_hanzi(2, row, 10);
 117   1          LCD_write_hanzi(4, row, 11);
 118   1          LCD_write_hanzi(6, row, 6);
 119   1          LCD_write_hanzi(8, row, 7);
 120   1          LCD_write_shu(10, row, 37);
 121   1          LCD_write_shu(11, row, 37);
 122   1          LCD_write_shu(12, row, 37);
 123   1      }
 124          
 125          void display_kao_qing_shi_bai(uchar row)
 126          {
 127   1          // 考勤失败
 128   1          LCD_write_shu(1, row, 37);
 129   1          LCD_write_shu(2, row, 37);
 130   1          LCD_write_hanzi(3, row, 0);
 131   1          LCD_write_hanzi(5, row, 1);
 132   1          LCD_write_hanzi(7, row, 16);
 133   1          LCD_write_hanzi(9, row, 17);
 134   1          LCD_write_shu(11, row, 37);
 135   1          LCD_write_shu(12, row, 37);
 136   1        
 137   1      }
 138          
 139          void display_bu_zai_kao_qing_shi_jian(uchar row)
 140          {
 141   1          // 不在考勤时间
 142   1          LCD_write_hanzi(1, row, 12);
 143   1          LCD_write_hanzi(3, row, 13);
 144   1          LCD_write_hanzi(5, row, 0);
 145   1          LCD_write_hanzi(7, row, 1);
 146   1          LCD_write_hanzi(9, row, 14);
 147   1          LCD_write_hanzi(11, row, 15);
 148   1      }
 149          
 150          void display_ben_shi_jian_dun_wu_ke(uchar row)
 151          {
 152   1          // 本时间段无课
 153   1          LCD_write_hanzi(1, row, 18);
 154   1          LCD_write_hanzi(3, row, 14);
 155   1          LCD_write_hanzi(5, row, 15);
 156   1          LCD_write_hanzi(7, row, 19);
 157   1          LCD_write_hanzi(9, row, 20);
 158   1          LCD_write_hanzi(11, row, 21);
 159   1      }
 160          
 161          void display_ben_jie_ke_yi_da_ka(uchar row)
 162          {
 163   1          // 本节课已打卡
 164   1          LCD_write_hanzi(1, row, 18);
 165   1          LCD_write_hanzi(3, row, 22);
 166   1          LCD_write_hanzi(5, row, 21);
 167   1          LCD_write_hanzi(7, row, 23);
 168   1          LCD_write_hanzi(9, row, 4);
 169   1          LCD_write_hanzi(11, row, 5);
 170   1      }
 171          void dispaly_kao_qing_cheng_gong(uchar row, uchar state)
 172          {
 173   1          // 考勤：
 174   1          LCD_write_shu(1, row, 37);
C51 COMPILER V9.59.0.0   MAIN                                                              06/27/2024 13:24:13 PAGE 4   

 175   1          LCD_write_hanzi(2, row, 0);
 176   1          LCD_write_hanzi(4, row, 1);
 177   1          LCD_write_shu(6, row, 36);
 178   1          if (state == '0')
 179   1          { // 正常
 180   2              LCD_write_hanzi(7, row, 26);
 181   2              LCD_write_hanzi(9, row, 27);
 182   2          }
 183   1          if (state == '1')
 184   1          { // 迟到
 185   2              LCD_write_hanzi(7, row, 28);
 186   2              LCD_write_hanzi(9, row, 29);
 187   2          }
 188   1          if (state == '2')
 189   1          {
 190   2              // 缺勤
 191   2              LCD_write_hanzi(7, row, 30);
 192   2              LCD_write_hanzi(9, row, 1);
 193   2          }
 194   1            LCD_write_shu(11, row, 37);
 195   1            LCD_write_shu(12, row, 37);
 196   1      }
 197          
 198          
 199          
 200          void display_cardnum(uchar row)
 201          {
 202   1          unsigned char first, second;
 203   1          // 卡号:
 204   1          LCD_write_hanzi(0, row, 5);
 205   1          LCD_write_hanzi(2, row, 9);
 206   1          LCD_write_shu(4, row, 36);
 207   1          first = (g_ucTempbuf[0] & 0xf0) >> 4;
 208   1          LCD_write_shu(5, row, first); // 写数字
 209   1          second = g_ucTempbuf[0] & 0x0f;
 210   1          LCD_write_shu(6, row, second); // 写数字
 211   1      
 212   1          first = (g_ucTempbuf[1] & 0xf0) >> 4;
 213   1          LCD_write_shu(7, row, first); // 写数字
 214   1          second = g_ucTempbuf[1] & 0x0f;
 215   1          LCD_write_shu(8, row, second); // 写数字
 216   1      
 217   1          first = (g_ucTempbuf[2] & 0xf0) >> 4;
 218   1          LCD_write_shu(9, row, first); // 写数字
 219   1          second = g_ucTempbuf[2] & 0x0f;
 220   1          LCD_write_shu(10, row, second); // 写数字
 221   1      
 222   1          first = (g_ucTempbuf[3] & 0xf0) >> 4;
 223   1          LCD_write_shu(11, row, first); // 写数字
 224   1          second = g_ucTempbuf[3] & 0x0f;
 225   1          LCD_write_shu(12, row, second); // 写数字
 226   1          LCD_write_shu(13, row, 37);
 227   1      }
 228          
 229          // 主函数
 230          void main()
 231          {
 232   1          unsigned char status;
 233   1          unsigned int temp;
 234   1      
 235   1          LCD_init();
 236   1          LCD_clear();
C51 COMPILER V9.59.0.0   MAIN                                                              06/27/2024 13:24:13 PAGE 5   

 237   1          display_title(FIRST_ROW);
 238   1          InitializeSystem();
 239   1          PcdReset();
 240   1          PcdAntennaOff();
 241   1          PcdAntennaOn();
 242   1      
 243   1          while (1)
 244   1          {
 245   2      
 246   2              // 写入读卡器所处地址。
 247   2              if (received_data[0] == 's')
 248   2              {
 249   3      
 250   3                  for (i = 0; i < 4; i++)
 251   3                  {
 252   4                      response_array[i + 11] = received_data[i + 1];
 253   4                  }
 254   3                  for (i = 0; i < 16; i++)
 255   3                  {
 256   4                      UART_sendbyte(write_ok[i]);
 257   4                  }
 258   3      
 259   3                  // 返回成功响应
 260   3              }
 261   2      
 262   2              status = PcdRequest(PICC_REQALL, g_ucTempbuf); // 寻卡
 263   2              if (status != MI_OK)
 264   2              {
 265   3      
 266   3                  display_title(FIRST_ROW);
 267   3                  clear_row(SECOND_ROW);
 268   3                  clear_row(THIRD_ROW);
 269   3                  continue;
 270   3              }
 271   2      
 272   2              status = PcdAnticoll(g_ucTempbuf); // 防冲撞
 273   2              if (status != MI_OK)
 274   2              {
 275   3      
 276   3                  continue;
 277   3              }
 278   2      
 279   2              // 转换卡片发送
 280   2              for (i = 0; i < 4; i++)
 281   2              {
 282   3                  uchar high_nibble = (g_ucTempbuf[i] >> 4) & 0x0F; // 高4位
 283   3                  uchar low_nibble = g_ucTempbuf[i] & 0x0F;         // 低4位
 284   3      
 285   3                  card_id[6 + 2 * i] = nibble_to_ascii(high_nibble); // 高4位转换为 ASCII
 286   3                  card_id[7 + 2 * i] = nibble_to_ascii(low_nibble);  // 低4位转换为 ASCII
 287   3              }
 288   2      
 289   2              for (i = 0; i < 16; i++)
 290   2              {
 291   3                  UART_sendbyte(card_id[i]);
 292   3              }
 293   2      
 294   2              display_cardnum(FIRST_ROW);
 295   2              status = PcdSelect(g_ucTempbuf); // 选定卡片
 296   2              if (status != MI_OK)
 297   2              {
 298   3      
C51 COMPILER V9.59.0.0   MAIN                                                              06/27/2024 13:24:13 PAGE 6   

 299   3                  continue;
 300   3              }
 301   2      
 302   2              status = PcdAuthState(PICC_AUTHENT1A, 1, DefaultKey, g_ucTempbuf); // 验证卡片密码
 303   2              if (status != MI_OK)
 304   2              {
 305   3      
 306   3                  continue;
 307   3              }
 308   2      
 309   2              // 写卡
 310   2              if (received_data[0] == 'w')
 311   2              {
 312   3                  for (i = 0; i < 10; i++)
 313   3                  {
 314   4                      stu_id[5 + i] = received_data[1 + i];
 315   4                      write_ok[2 + i] = received_data[1 + i];
 316   4                  }
 317   3                  status = PcdWrite(2, stu_id); // 写数据
 318   3                  if (status != MI_OK)
 319   3                  {
 320   4      
 321   4                      continue;
 322   4                  }
 323   3                  // 返回成功响应
 324   3                  for (i = 0; i < 16; i++)
 325   3                  {
 326   4                      UART_sendbyte(write_ok[i]);
 327   4                  }
 328   3                  // 显示绑定
 329   3                  display_sno(SECOND_ROW);
 330   3                  // 显示绑定成功
 331   3                  display_bang_ding_chen_gong(THIRD_ROW);
 332   3                  // 清除标志位
 333   3                  received_data[0] = 0;
 334   3      
 335   3                  // 读取卡片绑定的学号
 336   3              }
 337   2              else if (received_data[0] == 'r')
 338   2              {
 339   3                  status = PcdRead(2, g_ucTempbuf);
 340   3                  if (status != MI_OK)
 341   3                  {
 342   4                      continue;
 343   4                  }
 344   3                  for (i = 0; i < 16; i++)
 345   3                  {
 346   4                      UART_sendbyte(g_ucTempbuf[i]);
 347   4                  }
 348   3              }
 349   2              // 打卡模式，返回学号
 350   2              else if (received_data[0] == 'd')
 351   2              {
 352   3                  status = PcdRead(2, g_ucTempbuf);
 353   3                  if (status != MI_OK)
 354   3                  {
 355   4                      continue;
 356   4                  }
 357   3                  for (i = 0; i < 10; i++)
 358   3                  {
 359   4                      response_array[i + 1] = g_ucTempbuf[i + 5];
 360   4                  }
C51 COMPILER V9.59.0.0   MAIN                                                              06/27/2024 13:24:13 PAGE 7   

 361   3                  for (i = 0; i < 16; i++)
 362   3                  {
 363   4                      UART_sendbyte(response_array[i]);
 364   4                  }
 365   3                  if (received_data[1] == 'p')
 366   3                  {
 367   4                      display_sno(SECOND_ROW);
 368   4                      
 369   4                      if (received_data[2] == '1')
 370   4                          display_kao_qing_shi_bai(THIRD_ROW);
 371   4                      if (received_data[2] == '2')
 372   4                          display_bu_zai_kao_qing_shi_jian(THIRD_ROW);
 373   4                      if (received_data[2] == '3')
 374   4                          display_ben_shi_jian_dun_wu_ke(THIRD_ROW);
 375   4                      if (received_data[2] == '4')
 376   4                          display_ben_jie_ke_yi_da_ka(THIRD_ROW);
 377   4                      if (received_data[2] == '0')
 378   4                      {
 379   5                          dispaly_kao_qing_cheng_gong(THIRD_ROW, received_data[3]);
 380   5                      }
 381   4                  }
 382   3              }
 383   2              //
 384   2      
 385   2              PcdHalt();
 386   2          }
 387   1      }
*** WARNING C280 IN LINE 233 OF MAIN.C: 'temp': unreferenced local variable
 388          
 389          // 系统初始化
 390          void InitializeSystem()
 391          {
 392   1          // I/O 端口配置
 393   1          P0M1 = 0x0;
 394   1          P0M2 = 0x0;
 395   1          P1M1 = 0x0;
 396   1          P1M2 = 0x0;
 397   1          P3M1 = 0x0;
 398   1          P3M2 = 0xFF;
 399   1          P0 = 0xFF;
 400   1          P1 = 0xFF;
 401   1          P3 = 0xFF;
 402   1          P2 = 0xFF;
 403   1      
 404   1          // 串口配置
 405   1          SCON = 0x50; // 串行通信模式1，8位数据，允许接收
 406   1      
 407   1          // 定时器配置
 408   1          TMOD = 0x20; // T1为方式2（8位自动重装）
 409   1      
 410   1          // 设置定时器初值
 411   1          TH1 = 0xFA; // 设置波特率为4800bps
 412   1          TL1 = 0xFA;
 413   1      
 414   1          // 启动定时器1
 415   1          TR1 = 1; // 启动定时器1
 416   1      
 417   1          // 中断配置
 418   1          ES = 1; // 允许串行中断
 419   1          EA = 1; // 开启总中断
 420   1      
 421   1          // 设置标志
C51 COMPILER V9.59.0.0   MAIN                                                              06/27/2024 13:24:13 PAGE 8   

 422   1          TI = 1;
 423   1      }
 424          
 425          // UART接收中断服务函数
 426          void UART_R() interrupt 4
 427          {
 428   1          if (RI == 1)
 429   1          {                // 如果接收到数据
 430   2              Char = SBUF; // 读取接收到的数据到Char变量
 431   2      
 432   2              RI = 0; // 清除接收标志位
 433   2              if (Char == '#')
 434   2              { // 检测到结束符
 435   3                  is_read_data = 1;
 436   3      
 437   3                  data_index = 0;
 438   3              }
 439   2              else
 440   2              {
 441   3                  if (data_index <= MAX_LEN - 1)
 442   3                  { // 防止数组越界
 443   4                      received_data[data_index++] = Char;
 444   4                  }
 445   3              }
 446   2          }
 447   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2030    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =    103      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
